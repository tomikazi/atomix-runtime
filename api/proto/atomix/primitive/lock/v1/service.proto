/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive.lock.v1;

import "google/protobuf/duration.proto";
import "atomix/primitive/v1/descriptor.proto";
import "atomix/primitive/meta/v1/object.proto";
import "gogoproto/gogo.proto";

message LockRequest {
    google.protobuf.Duration timeout = 2 [
        (gogoproto.stdduration) = true
    ];
}

message LockResponse {
    LockInstance lock = 2 [
        (gogoproto.nullable) = false
    ];
}

message UnlockRequest {
    LockInstance lock = 2 [
        (gogoproto.nullable) = false
    ];
}

message UnlockResponse {
    LockInstance lock = 2 [
        (gogoproto.nullable) = false
    ];
}

message GetLockRequest {
    LockInstance lock = 2 [
        (gogoproto.nullable) = false
    ];
}

message GetLockResponse {
    LockInstance lock = 2 [
        (gogoproto.nullable) = false
    ];
}

message LockInstance {
    atomix.primitive.meta.v1.ObjectMeta meta = 1 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
    State state = 2;

    enum State {
        UNLOCKED = 0;
        LOCKED = 1;
    }
}

// Lock is a service for a lock primitive
service Lock {
    option (atomix.primitive.v1.primitive_type) = "Lock";

    // Lock attempts to acquire the lock
    rpc Lock (LockRequest) returns (LockResponse) {
        option (atomix.primitive.v1.operation_id) = 1;
        option (atomix.primitive.v1.operation_type) = COMMAND;
        option (atomix.primitive.v1.operation_async) = true;
    }

    // Unlock releases the lock
    rpc Unlock (UnlockRequest) returns (UnlockResponse) {
        option (atomix.primitive.v1.operation_id) = 2;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // GetLock gets the lock state
    rpc GetLock (GetLockRequest) returns (GetLockResponse) {
        option (atomix.primitive.v1.operation_id) = 3;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }
}