/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive.list.v1;

import "atomix/primitive/v1/descriptor.proto";
import "atomix/primitive/meta/v1/object.proto";
import "gogoproto/gogo.proto";

message SizeRequest {

}

message SizeResponse {
    uint32 size = 2;
}

message ContainsRequest {
    Value value = 2 [
        (gogoproto.nullable) = false
    ];
}

message ContainsResponse {
    bool contains = 2;
}

message Precondition {
    oneof precondition {
        atomix.primitive.meta.v1.ObjectMeta metadata = 1;
    }
}

message AppendRequest {
    Value value = 2 [
        (gogoproto.nullable) = false
    ];
}

message AppendResponse {

}

message GetRequest {
    uint32 index = 2;
}

message GetResponse {
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message SetRequest {
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
    repeated Precondition preconditions = 3 [
        (gogoproto.nullable) = false
    ];
}

message SetResponse {
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message InsertRequest {
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
    repeated Precondition preconditions = 3 [
        (gogoproto.nullable) = false
    ];
}

message InsertResponse {
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message RemoveRequest {
    uint32 index = 2;
    repeated Precondition preconditions = 3 [
        (gogoproto.nullable) = false
    ];
}

message RemoveResponse {
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message ClearRequest {

}

message ClearResponse {

}

message EventsRequest {
    bool replay = 2;
}

message EventsResponse {
    Event event = 2 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    Type type = 1;
    Item item = 2 [
        (gogoproto.nullable) = false
    ];

    enum Type {
        NONE = 0;
        ADD = 1;
        REMOVE = 2;
        REPLAY = 3;
    }
}

message ElementsRequest {

}

message ElementsResponse {
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message Item {
    uint32 index = 1;
    Value value = 2 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
}

message Value {
    atomix.primitive.meta.v1.ObjectMeta meta = 1 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
    string value = 2;
}

// List is a service for a list primitive
service List {
    option (atomix.primitive.v1.primitive_type) = "List";

    // Size gets the number of elements in the list
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.v1.operation_id) = 1;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }

    // Append appends a value to the list
    rpc Append (AppendRequest) returns (AppendResponse) {
        option (atomix.primitive.v1.operation_id) = 2;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Insert inserts a value at a specific index in the list
    rpc Insert (InsertRequest) returns (InsertResponse) {
        option (atomix.primitive.v1.operation_id) = 3;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Get gets the value at an index in the list
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.v1.operation_id) = 4;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }

    // Set sets the value at an index in the list
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.primitive.v1.operation_id) = 5;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Remove removes an element from the list
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.v1.operation_id) = 6;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Clear removes all elements from the list
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.v1.operation_id) = 7;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.v1.operation_id) = 8;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Elements streams all elements in the list
    rpc Elements (ElementsRequest) returns (stream ElementsResponse) {
        option (atomix.primitive.v1.operation_id) = 9;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }
}
