/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.runtime.election.v1;

import "atomix/runtime/primitive/v1/descriptor.proto";
import "atomix/runtime/meta/v1/object.proto";
import "gogoproto/gogo.proto";

message EnterRequest {

}

message EnterResponse {
    uint64 candidate_id = 1 [
        (gogoproto.customname) = "CandidateID"
    ];
    Term term = 2 [
        (gogoproto.nullable) = false
    ];
}

message WithdrawRequest {
    uint64 candidate_id = 2 [
        (gogoproto.customname) = "CandidateID"
    ];
}

message WithdrawResponse {
    Term term = 2 [
        (gogoproto.nullable) = false
    ];
}

message AnointRequest {
    uint64 candidate_id = 2 [
        (gogoproto.customname) = "CandidateID"
    ];
}

message AnointResponse {
    Term term = 2 [
        (gogoproto.nullable) = false
    ];
}

message PromoteRequest {
    uint64 candidate_id = 2 [
        (gogoproto.customname) = "CandidateID"
    ];
}

message PromoteResponse {
    Term term = 2 [
        (gogoproto.nullable) = false
    ];
}

message EvictRequest {
    uint64 candidate_id = 2 [
        (gogoproto.customname) = "CandidateID"
    ];
}

message EvictResponse {
    Term term = 2 [
        (gogoproto.nullable) = false
    ];
}

message GetTermRequest {

}

message GetTermResponse {
    Term term = 2 [
        (gogoproto.nullable) = false
    ];
}

message EventsRequest {

}

message EventsResponse {
    Event event = 2 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    Type type = 1;
    Term term = 2 [
        (gogoproto.nullable) = false
    ];

    enum Type {
        NONE = 0;
        CHANGED = 1;
    }
}

message Term {
    atomix.runtime.meta.v1.ObjectMeta meta = 1 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
    uint64 leader = 2;
    repeated uint64 candidates = 3;
}

// LeaderElection is a service for a leader election primitive
service LeaderElection {
    option (atomix.runtime.primitive.v1.primitive_type) = "LeaderElection";

    // Enter enters the leader election
    rpc Enter (EnterRequest) returns (EnterResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 1;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Withdraw withdraws a candidate from the leader election
    rpc Withdraw (WithdrawRequest) returns (WithdrawResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 2;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Anoint anoints a candidate leader
    rpc Anoint (AnointRequest) returns (AnointResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 3;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Promote promotes a candidate
    rpc Promote (PromoteRequest) returns (PromoteResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 4;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Evict evicts a candidate from the election
    rpc Evict (EvictRequest) returns (EvictResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 5;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // GetTerm gets the current leadership term
    rpc GetTerm (GetTermRequest) returns (GetTermResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 6;
        option (atomix.runtime.primitive.v1.operation_type) = QUERY;
    }

    // Events listens for leadership events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 7;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }
}