/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.runtime.counter.v1;

import "atomix/runtime/meta/v1/headers.proto";
import "atomix/runtime/primitive/v1/descriptor.proto";
import "gogoproto/gogo.proto";

// Counter is a service for a counter primitive
service Counter {
    option (atomix.runtime.primitive.v1.primitive_type) = "Counter";

    // Set sets the counter value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 1;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Get gets the current counter value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 2;
        option (atomix.runtime.primitive.v1.operation_type) = QUERY;
    }

    // Increment increments the counter value
    rpc Increment (IncrementRequest) returns (IncrementResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 3;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Decrement decrements the counter value
    rpc Decrement (DecrementRequest) returns (DecrementResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 4;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }
}

message IncrementRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    int64 delta = 2;
}

message IncrementResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    int64 value = 2;
}

message DecrementRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    int64 delta = 2;
}

message DecrementResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    int64 value = 2;
}

message GetRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
}

message GetResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    int64 value = 2;
}

message Precondition {
    oneof precondition {
        int64 value = 1;
    }
}

message SetRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    int64 value = 2;
    repeated Precondition preconditions = 3 [
        (gogoproto.nullable) = false
    ];
}

message SetResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    int64 value = 2;
}

message Value {
    int64 value = 1;
}
