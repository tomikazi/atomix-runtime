// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package atomix.runtime.list.v1;

import "atomix/runtime/primitive/v1/descriptor.proto";
import "atomix/runtime/meta/v1/headers.proto";
import "atomix/runtime/meta/v1/object.proto";
import "gogoproto/gogo.proto";

message SizeRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
}

message SizeResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    uint32 size = 2;
}

message ContainsRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Value value = 2 [
        (gogoproto.nullable) = false
    ];
}

message ContainsResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    bool contains = 2;
}

message Precondition {
    oneof precondition {
        atomix.runtime.meta.v1.ObjectMeta metadata = 1;
    }
}

message AppendRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Value value = 2 [
        (gogoproto.nullable) = false
    ];
}

message AppendResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
}

message GetRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    uint32 index = 2;
}

message GetResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message SetRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
    repeated Precondition preconditions = 3 [
        (gogoproto.nullable) = false
    ];
}

message SetResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message InsertRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
    repeated Precondition preconditions = 3 [
        (gogoproto.nullable) = false
    ];
}

message InsertResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message RemoveRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    uint32 index = 2;
    repeated Precondition preconditions = 3 [
        (gogoproto.nullable) = false
    ];
}

message RemoveResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message ClearRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
}

message ClearResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
}

message EventsRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    bool replay = 2;
}

message EventsResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Event event = 2 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    Type type = 1;
    Item item = 2 [
        (gogoproto.nullable) = false
    ];

    enum Type {
        NONE = 0;
        ADD = 1;
        REMOVE = 2;
        REPLAY = 3;
    }
}

message ElementsRequest {
    atomix.runtime.meta.v1.RequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
}

message ElementsResponse {
    atomix.runtime.meta.v1.ResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    Item item = 2 [
        (gogoproto.nullable) = false
    ];
}

message Item {
    uint32 index = 1;
    Value value = 2 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
}

message Value {
    atomix.runtime.meta.v1.ObjectMeta meta = 1 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
    string value = 2;
}

// List is a service for a list primitive
service List {
    option (atomix.runtime.primitive.v1.primitive_type) = "List";

    // Size gets the number of elements in the list
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 1;
        option (atomix.runtime.primitive.v1.operation_type) = QUERY;
    }

    // Append appends a value to the list
    rpc Append (AppendRequest) returns (AppendResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 2;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Insert inserts a value at a specific index in the list
    rpc Insert (InsertRequest) returns (InsertResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 3;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Get gets the value at an index in the list
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 4;
        option (atomix.runtime.primitive.v1.operation_type) = QUERY;
    }

    // Set sets the value at an index in the list
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 5;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Remove removes an element from the list
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 6;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Clear removes all elements from the list
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 7;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 8;
        option (atomix.runtime.primitive.v1.operation_type) = COMMAND;
    }

    // Elements streams all elements in the list
    rpc Elements (ElementsRequest) returns (stream ElementsResponse) {
        option (atomix.runtime.primitive.v1.operation_id) = 9;
        option (atomix.runtime.primitive.v1.operation_type) = QUERY;
    }
}
