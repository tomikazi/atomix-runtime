/*
Copyright 2022-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.runtime.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

// The runtime service provides functions for applications to create and manage primitives
// at runtime.
service Runtime {
    rpc CreatePrimitive(CreatePrimitiveRequest) returns (CreatePrimitiveResponse);
    rpc DeletePrimitive(DeletePrimitiveRequest) returns (DeletePrimitiveResponse);
    rpc CreateProxy(CreateProxyRequest) returns (CreateProxyResponse);
    rpc CloseProxy(CloseProxyRequest) returns (CloseProxyResponse);
}

message Primitive {
    string id = 1 [
        (gogoproto.customname) = "PrimitiveID",
        (gogoproto.casttype) = "PrimitiveID"
    ];
    string type = 2;
    string version = 3;
    google.protobuf.Any options = 4;
}

message CreatePrimitiveRequest {
    Primitive primitive = 1;
}

message CreatePrimitiveResponse {

}

message DeletePrimitiveRequest {
    string primitive_id = 1 [
        (gogoproto.customname) = "PrimitiveID",
        (gogoproto.casttype) = "PrimitiveID"
    ];

    string store_id = 2 [
        (gogoproto.customname) = "StoreID",
        (gogoproto.casttype) = "StoreID"
    ];
}

message DeletePrimitiveResponse {

}

message Proxy {
    string primitive_id = 1 [
        (gogoproto.customname) = "PrimitiveID",
        (gogoproto.casttype) = "PrimitiveID"
    ];
    google.protobuf.Any options = 4;
}

message CreateProxyRequest {
    Proxy proxy = 1;
}

message CreateProxyResponse {
    uint64 proxy_id = 1 [
        (gogoproto.customname) = "ProxyID",
        (gogoproto.casttype) = "ProxyID"
    ];
}

message CloseProxyRequest {
    uint64 proxy_id = 1 [
        (gogoproto.customname) = "ProxyID",
        (gogoproto.casttype) = "ProxyID"
    ];
}

message CloseProxyResponse {

}
