/*
Copyright 2022-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.runtime.v1;

import "gogoproto/gogo.proto";

message Driver {
    string name = 1;
    string version = 2;
}

message Agent {
    string name = 1;
    string namespace = 2;
}

message StartAgentRequest {
    Driver driver = 1 [
        (gogoproto.nullable) = false
    ];
    Agent agent = 2 [
        (gogoproto.nullable) = false
    ];
}

message StartAgentResponse {

}

message ConfigureAgentRequest {
    Driver driver = 1 [
        (gogoproto.nullable) = false
    ];
    Agent agent = 2 [
        (gogoproto.nullable) = false
    ];
}

message ConfigureAgentResponse {

}

message StopAgentRequest {
    Driver driver = 1 [
        (gogoproto.nullable) = false
    ];
    Agent agent = 2 [
        (gogoproto.nullable) = false
    ];
}

message StopAgentResponse {

}

message Proxy {
    string name = 1;
    string namespace = 2;
}

message CreateProxyRequest {
    Proxy proxy = 1 [
        (gogoproto.nullable) = false
    ];
}

message CreateProxyResponse {

}

message DestroyProxyRequest {
    Proxy id = 1 [
        (gogoproto.nullable) = false
    ];
}

message DestroyProxyResponse {

}

// The runtime manager service provides functions managing runtime drivers externally.
service RuntimeManager {
    rpc StartAgent(StartAgentRequest) returns (StartAgentResponse);
    rpc StopAgent(StopAgentRequest) returns (StopAgentResponse);

    rpc CreateProxy(CreateProxyRequest) returns (CreateProxyResponse);
    rpc DestroyProxy(DestroyProxyRequest) returns (DestroyProxyResponse);
}
